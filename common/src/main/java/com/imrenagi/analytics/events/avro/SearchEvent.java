/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.imrenagi.analytics.events.avro;  
@SuppressWarnings("all")
/** Contains the userId, search query and the timestamp for the event. */
@org.apache.avro.specific.AvroGenerated
public class SearchEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SearchEvent\",\"namespace\":\"com.imrenagi.analytics.events.avro\",\"doc\":\"Contains the userId, search query and the timestamp for the event.\",\"fields\":[{\"name\":\"userId\",\"type\":\"int\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"queryText\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int userId;
  @Deprecated public long timestamp;
  @Deprecated public java.lang.CharSequence queryText;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SearchEvent() {}

  /**
   * All-args constructor.
   */
  public SearchEvent(java.lang.Integer userId, java.lang.Long timestamp, java.lang.CharSequence queryText) {
    this.userId = userId;
    this.timestamp = timestamp;
    this.queryText = queryText;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return userId;
    case 1: return timestamp;
    case 2: return queryText;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: userId = (java.lang.Integer)value$; break;
    case 1: timestamp = (java.lang.Long)value$; break;
    case 2: queryText = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'userId' field.
   */
  public java.lang.Integer getUserId() {
    return userId;
  }

  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.Integer value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'queryText' field.
   */
  public java.lang.CharSequence getQueryText() {
    return queryText;
  }

  /**
   * Sets the value of the 'queryText' field.
   * @param value the value to set.
   */
  public void setQueryText(java.lang.CharSequence value) {
    this.queryText = value;
  }

  /** Creates a new SearchEvent RecordBuilder */
  public static com.imrenagi.analytics.events.avro.SearchEvent.Builder newBuilder() {
    return new com.imrenagi.analytics.events.avro.SearchEvent.Builder();
  }
  
  /** Creates a new SearchEvent RecordBuilder by copying an existing Builder */
  public static com.imrenagi.analytics.events.avro.SearchEvent.Builder newBuilder(com.imrenagi.analytics.events.avro.SearchEvent.Builder other) {
    return new com.imrenagi.analytics.events.avro.SearchEvent.Builder(other);
  }
  
  /** Creates a new SearchEvent RecordBuilder by copying an existing SearchEvent instance */
  public static com.imrenagi.analytics.events.avro.SearchEvent.Builder newBuilder(com.imrenagi.analytics.events.avro.SearchEvent other) {
    return new com.imrenagi.analytics.events.avro.SearchEvent.Builder(other);
  }
  
  /**
   * RecordBuilder for SearchEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SearchEvent>
    implements org.apache.avro.data.RecordBuilder<SearchEvent> {

    private int userId;
    private long timestamp;
    private java.lang.CharSequence queryText;

    /** Creates a new Builder */
    private Builder() {
      super(com.imrenagi.analytics.events.avro.SearchEvent.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.imrenagi.analytics.events.avro.SearchEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.queryText)) {
        this.queryText = data().deepCopy(fields()[2].schema(), other.queryText);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SearchEvent instance */
    private Builder(com.imrenagi.analytics.events.avro.SearchEvent other) {
            super(com.imrenagi.analytics.events.avro.SearchEvent.SCHEMA$);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.queryText)) {
        this.queryText = data().deepCopy(fields()[2].schema(), other.queryText);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'userId' field */
    public java.lang.Integer getUserId() {
      return userId;
    }
    
    /** Sets the value of the 'userId' field */
    public com.imrenagi.analytics.events.avro.SearchEvent.Builder setUserId(int value) {
      validate(fields()[0], value);
      this.userId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'userId' field has been set */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'userId' field */
    public com.imrenagi.analytics.events.avro.SearchEvent.Builder clearUserId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'timestamp' field */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }
    
    /** Sets the value of the 'timestamp' field */
    public com.imrenagi.analytics.events.avro.SearchEvent.Builder setTimestamp(long value) {
      validate(fields()[1], value);
      this.timestamp = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'timestamp' field has been set */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'timestamp' field */
    public com.imrenagi.analytics.events.avro.SearchEvent.Builder clearTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'queryText' field */
    public java.lang.CharSequence getQueryText() {
      return queryText;
    }
    
    /** Sets the value of the 'queryText' field */
    public com.imrenagi.analytics.events.avro.SearchEvent.Builder setQueryText(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.queryText = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'queryText' field has been set */
    public boolean hasQueryText() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'queryText' field */
    public com.imrenagi.analytics.events.avro.SearchEvent.Builder clearQueryText() {
      queryText = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public SearchEvent build() {
      try {
        SearchEvent record = new SearchEvent();
        record.userId = fieldSetFlags()[0] ? this.userId : (java.lang.Integer) defaultValue(fields()[0]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.lang.Long) defaultValue(fields()[1]);
        record.queryText = fieldSetFlags()[2] ? this.queryText : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
